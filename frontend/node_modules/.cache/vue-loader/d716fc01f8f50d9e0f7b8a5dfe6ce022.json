{"remainingRequest":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/src/views/myapp/report.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/src/views/myapp/report.vue","mtime":1741865254064},{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1741866277709},{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/thread-loader/dist/cjs.js","mtime":1741866277705},{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/babel-loader/lib/index.js","mtime":1741866279329},{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/cache-loader/dist/cjs.js","mtime":1741866277709},{"path":"/home/ubuntu/graduation-design/frontend/EnhancedAccessCtrl-FrontEnd/node_modules/vue-loader/lib/index.js","mtime":1741866279657}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}