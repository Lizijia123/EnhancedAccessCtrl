# Generated by Django 5.1.6 on 2025-02-26 04:00

import SFWAP.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DetectFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_type', models.CharField(choices=[('DetectFeature', 'DetectFeature'), ('SeqOccurTimeFeature', 'SeqOccurTimeFeature')], default='DetectFeature', max_length=20)),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=100)),
                ('string_list', models.JSONField(blank=True, null=True, validators=[SFWAP.models.validate_string_list])),
            ],
        ),
        migrations.CreateModel(
            name='LoginCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_role', models.CharField(max_length=20)),
                ('username', models.CharField(max_length=50)),
                ('password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PathSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_path_variable', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='RequestDataField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(choices=[('String', 'String'), ('Number', 'Number'), ('Boolean', 'Boolean'), ('List', 'List'), ('Object', 'Object')], max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='RequestParam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_necessary', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='API',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_url', models.CharField(max_length=200, validators=[django.core.validators.URLValidator()])),
                ('sample_request_data', models.CharField(max_length=200)),
                ('request_method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=10)),
                ('function_description', models.CharField(max_length=200)),
                ('permission_info', models.CharField(max_length=2000)),
                ('path_segment_list', models.ManyToManyField(to='SFWAP.pathsegment')),
                ('request_data_fields', models.ManyToManyField(to='SFWAP.requestdatafield')),
                ('request_param_list', models.ManyToManyField(to='SFWAP.requestparam')),
            ],
        ),
        migrations.CreateModel(
            name='TargetApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('APP_name', models.CharField(max_length=20, unique=True)),
                ('APP_url', models.CharField(max_length=200, validators=[django.core.validators.URLValidator()])),
                ('user_behavior_cycle', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('SFWAP_address', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d{1,5}$')])),
                ('description', models.CharField(max_length=2000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_draft', models.BooleanField(default=False)),
                ('last_API_discovery_at', models.DateTimeField(blank=True, null=True)),
                ('last_model_construction_at', models.DateTimeField(blank=True, null=True)),
                ('detect_state', models.CharField(choices=[('BASIC_INFO_TO_CONFIGURE', 'BASIC_INFO_TO_CONFIGURE'), ('API_LIST_TO_DISCOVER', 'API_LIST_TO_DISCOVER'), ('API_LIST_TO_IMPROVE', 'API_LIST_TO_IMPROVE'), ('MODEL_FEATURES_TO_CONFIGURE', 'MODEL_FEATURES_TO_CONFIGURE'), ('STARTED', 'STARTED'), ('PAUSED', 'PAUSED')], max_length=50)),
                ('model_report', models.TextField(blank=True, null=True)),
                ('enhanced_detection_enabled', models.BooleanField(blank=True, null=True)),
                ('combined_data_duration', models.IntegerField(blank=True, null=True)),
                ('detect_feature_list', models.ManyToManyField(blank=True, related_name='used_in_apps', to='SFWAP.detectfeature')),
                ('discovered_API_list', models.ManyToManyField(related_name='discovered_in_apps', to='SFWAP.api')),
                ('login_credentials', models.ManyToManyField(to='SFWAP.logincredential')),
                ('user_API_list', models.ManyToManyField(related_name='used_in_apps', to='SFWAP.api')),
            ],
        ),
        migrations.CreateModel(
            name='TrafficData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], max_length=10)),
                ('header', models.CharField(max_length=5000)),
                ('url', models.CharField(max_length=1000)),
                ('data', models.CharField(max_length=5000)),
                ('status_code', models.IntegerField()),
                ('accessed_at', models.DateTimeField()),
                ('detection_result', models.CharField(choices=[('NORMAL', 'NORMAL'), ('MALICIOUS', 'MALICIOUS')], max_length=20)),
                ('API', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='SFWAP.api')),
            ],
            options={
                'ordering': ['accessed_at'],
            },
        ),
        migrations.CreateModel(
            name='DetectionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField()),
                ('detection_result', models.CharField(choices=[('ALLOW', 'ALLOW'), ('ALARM', 'ALARM'), ('INTERCEPTION', 'INTERCEPTION')], max_length=20)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SFWAP.targetapplication')),
                ('traffic_data_list', models.ManyToManyField(to='SFWAP.trafficdata')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='targetapplication',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
